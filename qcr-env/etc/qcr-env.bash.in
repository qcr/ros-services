#!/bin/bash

# --------- QCR Related --------------
export QCR_ROBOT_VERSION="0.1"
# Get current path of this script
export QCR_ROBOT_CONF_PATH="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/qcr-env.bash"
# Robot type managed by this device
export QCR_ROBOT_TYPE=
# Sets this robot to be a ROS MASTER (true) or a USER PC (false)
export QCR_IS_MASTER=true
# Sets the ROS version (1 or 2). Defaults to 1
export QCR_ROS_VERSION=1

# --------- ROS Related --------------
# Check distribution of ros and update
_os_release="$(lsb_release -r)"
if [[ $_os_release == *"20.04"* ]]; then
    if [[ "QCR_ROS_VERSION" -eq 1 ]]; then
        export QCR_ROS_DISTRO=noetic
    elif [[ "QCR_ROS_VERSION" -eq 2 ]]; then
        export QCR_ROS_DISTRO=foxy
    else
        echo "QCR CONFIG ERROR: Unknown ROS version -> Defaulting to ROS 1 (noetic)"
        export QCR_ROS_DISTRO=noetic
    fi
else
    echo "QCR CONFIG ERROR: Only Supporting Ubuntu 20.04 at this stage -> Defaulting to ROS 1 (noetic)"
    export QCR_ROS_DISTRO=noetic
fi

if $QCR_IS_MASTER; then
    export ROS_MASTER_URI=http://$(hostname):11311
else
    export ROS_MASTER_URI=http://user-pc:11311
fi

# Sets the default location from which to source ROS packages
export ROS_WORKSPACE=/opt/ros/$QCR_ROS_DISTRO/setup.bash

# [TESTING - No Functionality Yet] 
# Specify sensor or robot specific workspace into ROS_BASE_WORKSPACE
export ROS_BASE_WORKSPACE=
# Specify user specific (non-robot centric) workspace (i.e., automation) into ROS_USER_WORKSPACE
export ROS_USER_WORKSPACE=

# --------- Bringup Related --------------
# The command to run before bringing up the robot service
export QCR_ROBOT_PRELAUNCH=

# The command that used by the bringup service to launch the robot stack
export QCR_ROBOT_LAUNCH=

# The command to run when the bringup service exits
export QCR_ROBOT_POSTEXIT=

# --------- System Related -----------
export NETWORK_CONFIG_DIR=/etc/systemd/network
